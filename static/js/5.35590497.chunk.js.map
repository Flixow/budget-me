{"version":3,"sources":["data/fetch/common.fetch.js","data/fetch/budget.fetch.js","data/fetch/index.js","data/hooks/useAllCategories.js","data/hooks/useBudget.js","data/hooks/useBudgetedCategories.js","data/hooks/index.js","utils/index.js","pages/Budget/components/BudgetTransactionList/BudgetTransactionList.css.js","pages/Budget/components/BudgetTransactionList/BudgetTransactionList.js","pages/Budget/components/BudgetTransactionList/index.js"],"names":["fetchAllCategories","a","async","fetch","process","res","json","data","fetchBudget","id","fetchBudgetedCategories","budgetId","addBudgetTransaction","method","headers","body","JSON","stringify","common","budget","useAllCategories","useQuery","API","useBudget","useBudgetedCategories","formatDate","string","date","Date","Intl","DateTimeFormat","format","formatCurrency","value","number","Number","NumberFormat","style","currency","List","styled","ul","theme","spacing","xs","ListItem","div","colors","gray","dark","BudgetTransactionList","budgetedCategories","allCategories","selectedParentCategoryId","useContext","BudgetContext","store","filteredTransactionsBySelectedParentCategory","useMemo","transactions","filter","transaction","some","budgetedCategory","categoryId","find","category","parentCategory","name","error","groupedTransactions","groupBy","item","getUTCDate","Object","entries","map","key","description","amount"],"mappings":"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","file":"static/js/5.35590497.chunk.js","sourcesContent":["export async function fetchAllCategories() {\n  const res = await fetch(`${process.env.REACT_APP_API_URL}/categories/?_expand=parentCategory`);\n  const data = await res.json();\n\n  return data;\n}\n","export async function fetchBudget({ id }) {\n  return (await fetch(\n    `${process.env.REACT_APP_API_URL}/budgets/${id}/?_embed=transactions`,\n  )).json();\n}\n\nexport async function fetchBudgetedCategories({ budgetId }) {\n  return (await fetch(\n    `${process.env.REACT_APP_API_URL}/budgets/${budgetId}/budgetCategories`,\n  )).json();\n}\n\nexport async function addBudgetTransaction({ budgetId, data }) {\n  // https://github.com/typicode/json-server/issues/925\n  // https://github.com/codekraft-studio/json-server/commit/5f495f0e02e8df47224b2afb3af511fa2e6f806e\n  const res = await fetch(`${process.env.REACT_APP_API_URL}/budgets/${budgetId}/transactions`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n\n  return await res.json();\n}\n","import * as common from './common.fetch';\nimport * as budget from './budget.fetch';\n\nexport default {\n  common,\n  budget,\n};\n","import { useQuery } from 'react-query';\nimport API from 'data/fetch';\n\nfunction useAllCategories() {\n  return useQuery(\n    ['allCategories'],\n    API.common.fetchAllCategories,\n  );\n}\n\nexport default useAllCategories;\n","import { useQuery } from 'react-query';\nimport API from 'data/fetch';\n\nfunction useBudget(id) {\n  return useQuery(\n    ['budget', { id }],\n    API.budget.fetchBudget,\n  );\n}\n\nexport default useBudget;\n","import { useQuery } from 'react-query';\nimport API from 'data/fetch';\n\nfunction useBudgetedCategories(id) {\n  return useQuery(\n    ['budgetedCategories', { budgetId: id }],\n    API.budget.fetchBudgetedCategories,\n  );\n}\n\nexport default useBudgetedCategories;\n","export { default as useAllCategories } from './useAllCategories';\nexport { default as useBudget } from './useBudget';\nexport { default as useBudgetedCategories } from './useBudgetedCategories';\n","export const formatDate = string => {\n  const date = new Date(string);\n\n  return new Intl.DateTimeFormat('pl').format(date);\n};\n\nexport const formatCurrency = value => {\n  const number = Number(value);\n\n  return new Intl.NumberFormat('pl', { style: 'currency', currency: 'PLN' }).format(number);\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  ul + ul {\n    margin-top: ${({ theme }) => theme.spacing.xs}px;\n  }\n`;\n\nexport const ListItem = styled.div`\n  border: 1px solid ${({ theme }) => theme.colors.gray.dark};\n  padding: ${({ theme }) => theme.spacing.xs}px;\n  display: flex;\n  justify-content: space-between;\n\n  > *:nth-child(1) {\n    flex: 4;\n  }\n  > *:nth-child(2) {\n    flex: 2;\n  }\n  > *:nth-child(3) {\n    flex: 3;\n  }\n  > *:nth-child(4) {\n    flex: 1;\n  }\n`;\n","import React, { useMemo, useContext } from 'react';\nimport { groupBy } from 'lodash';\nimport { BudgetContext } from 'data/context';\nimport { formatDate, formatCurrency } from 'utils';\nimport { useBudget, useBudgetedCategories, useAllCategories } from 'data/hooks';\n\nimport { List, ListItem } from './BudgetTransactionList.css';\n\nconst BudgetTransactionList = () => {\n  const { data: budget } = useBudget(1);\n  const { data: budgetedCategories } = useBudgetedCategories(1);\n  const { data: allCategories } = useAllCategories();\n  const { selectedParentCategoryId } = useContext(BudgetContext.store);\n\n  const filteredTransactionsBySelectedParentCategory = useMemo(() => {\n    if (typeof selectedParentCategoryId === 'undefined') {\n      return budget.transactions;\n    }\n\n    if (selectedParentCategoryId === null) {\n      return budget.transactions.filter(transaction => {\n        const hasBudgetedCategory = budgetedCategories\n          .some(budgetedCategory => budgetedCategory.categoryId === transaction.categoryId);\n\n        return !hasBudgetedCategory;\n      });\n    }\n\n    return budget.transactions.filter(transaction => {\n      try {\n        const parentCategoryName = allCategories.find(category => category.id === transaction.categoryId).parentCategory.name;\n\n        return parentCategoryName === selectedParentCategoryId;\n      } catch (error) {\n        return false;\n      }\n    });\n  }, [selectedParentCategoryId, budget.transactions, allCategories, budgetedCategories]);\n  const groupedTransactions = useMemo(() => groupBy(\n    filteredTransactionsBySelectedParentCategory,\n    item => new Date(item.date).getUTCDate(),\n  ), [filteredTransactionsBySelectedParentCategory]);\n\n  return (\n    <List>\n      {Object.entries(groupedTransactions).map(([key, transactions]) => (\n        <ul key={key}>\n          {transactions.map(transaction => (\n            <ListItem key={transaction.id}>\n              <div>{transaction.description}</div>\n              <div>{formatCurrency(transaction.amount)}</div>\n              <div>{formatDate(transaction.date)}</div>\n              <div>{(allCategories.find(category => category.id === transaction.categoryId) || {}).name}</div>\n            </ListItem>\n          ))}\n        </ul>\n      ))}\n    </List>\n  );\n};\n\nexport default BudgetTransactionList;\n","export { default } from './BudgetTransactionList';\n"],"sourceRoot":""}